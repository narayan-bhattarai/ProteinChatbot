{"ast":null,"code":"import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class AuthorizeInterceptor {\n  constructor(baseUrl) {\n    this.loginUrl = `${baseUrl}Identity/Account/Login`;\n  }\n  intercept(req, next) {\n    return next.handle(req).pipe(catchError(error => {\n      if (error instanceof HttpErrorResponse && error.url?.startsWith(this.loginUrl)) {\n        window.location.href = `${this.loginUrl}?ReturnUrl=${window.location.pathname}`;\n      }\n      return throwError(() => error);\n    }),\n    // HACK: As of .NET 8 preview 5, some non-error responses still need to be redirected to login page.\n    map(event => {\n      2;\n      if (event instanceof HttpResponse && event.url?.startsWith(this.loginUrl)) {\n        window.location.href = `${this.loginUrl}?ReturnUrl=${window.location.pathname}`;\n      }\n      return event;\n    }));\n  }\n  static {\n    this.ɵfac = function AuthorizeInterceptor_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthorizeInterceptor)(i0.ɵɵinject('BASE_URL'));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthorizeInterceptor,\n      factory: AuthorizeInterceptor.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpErrorResponse","HttpResponse","throwError","catchError","map","AuthorizeInterceptor","constructor","baseUrl","loginUrl","intercept","req","next","handle","pipe","error","url","startsWith","window","location","href","pathname","event","i0","ɵɵinject","factory","ɵfac","providedIn"],"sources":["C:\\MyFiles\\PersonalProject\\CleanArchitecture\\src\\Web\\ClientApp\\src\\api-authorization\\authorize.interceptor.ts"],"sourcesContent":["import { Inject, Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent, HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthorizeInterceptor implements HttpInterceptor {\r\n  loginUrl: string;\r\n\r\n  constructor(@Inject('BASE_URL') baseUrl: string) {\r\n    this.loginUrl = `${baseUrl}Identity/Account/Login`;\r\n  }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    return next.handle(req).pipe(\r\n      catchError(error => {\r\n        if (error instanceof HttpErrorResponse && error.url?.startsWith(this.loginUrl)) {\r\n          window.location.href = `${this.loginUrl}?ReturnUrl=${window.location.pathname}`;\r\n        }\r\n        return throwError(() => error);\r\n      }),\r\n      // HACK: As of .NET 8 preview 5, some non-error responses still need to be redirected to login page.\r\n      map((event: HttpEvent<any>) => {2\r\n        if (event instanceof HttpResponse && event.url?.startsWith(this.loginUrl)) {\r\n          window.location.href = `${this.loginUrl}?ReturnUrl=${window.location.pathname}`;\r\n        }\r\n        return event;\r\n      }));\r\n  }\r\n}\r\n"],"mappings":"AACA,SAA+DA,iBAAiB,EAAEC,YAAY,QAAQ,sBAAsB;AAC5H,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;AAKhD,OAAM,MAAOC,oBAAoB;EAG/BC,YAAgCC,OAAe;IAC7C,IAAI,CAACC,QAAQ,GAAG,GAAGD,OAAO,wBAAwB;EACpD;EAEAE,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,OAAOA,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC,CAACG,IAAI,CAC1BV,UAAU,CAACW,KAAK,IAAG;MACjB,IAAIA,KAAK,YAAYd,iBAAiB,IAAIc,KAAK,CAACC,GAAG,EAAEC,UAAU,CAAC,IAAI,CAACR,QAAQ,CAAC,EAAE;QAC9ES,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG,IAAI,CAACX,QAAQ,cAAcS,MAAM,CAACC,QAAQ,CAACE,QAAQ,EAAE;MACjF;MACA,OAAOlB,UAAU,CAAC,MAAMY,KAAK,CAAC;IAChC,CAAC,CAAC;IACF;IACAV,GAAG,CAAEiB,KAAqB,IAAI;MAAE,CAAC;MAC/B,IAAIA,KAAK,YAAYpB,YAAY,IAAIoB,KAAK,CAACN,GAAG,EAAEC,UAAU,CAAC,IAAI,CAACR,QAAQ,CAAC,EAAE;QACzES,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG,IAAI,CAACX,QAAQ,cAAcS,MAAM,CAACC,QAAQ,CAACE,QAAQ,EAAE;MACjF;MACA,OAAOC,KAAK;IACd,CAAC,CAAC,CAAC;EACP;;;uCAtBWhB,oBAAoB,EAAAiB,EAAA,CAAAC,QAAA,CAGX,UAAU;IAAA;EAAA;;;aAHnBlB,oBAAoB;MAAAmB,OAAA,EAApBnB,oBAAoB,CAAAoB,IAAA;MAAAC,UAAA,EAFnB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}